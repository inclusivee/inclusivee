generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String
  password          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  type              String
  ebility           Ability[]
  addresses         Address[]
  education         Education[]
  experience        Experience[]
  jobs              Job[]
  jobApplications   JobApplication[]
  candidateProfiles CandidateProfile[]
  resumeProfile     ResumeProfile[]

  @@map("user")
}

model Address {
  zipcode   String?
  street    String?
  number    String?
  district  String?
  city      String?
  state     String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  idAddress Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])

  @@map("address")
}

model CandidateProfile {
  birthday           String?
  cpf                String?
  rg                 String?
  phone              String?
  userId             Int
  fullName           String?
  idCandidateProfile Int     @id @default(autoincrement())
  user               User    @relation(fields: [userId], references: [id])

  @@map("profileCandidate")
}

model ResumeProfile {
  idResumeProfile Int     @id @default(autoincrement())
  resume          String?
  userId          Int
  user            User    @relation(fields: [userId], references: [id])

  @@map("resumeProfile")
}

model Experience {
  idExperience     Int     @id @default(autoincrement())
  jobTitle         String?
  companyName      String?
  responsibilities String?
  userId           Int
  startDate        String?
  endDate          String?
  user             User    @relation(fields: [userId], references: [id])

  @@map("experience")
}

model Ability {
  idAbility       Int     @id @default(autoincrement())
  nameAbility     String?
  experienceYears Int?
  userId          Int
  user            User    @relation(fields: [userId], references: [id])

  @@map("ability")
}

model Education {
  idEducation        Int     @id @default(autoincrement())
  degree             String?
  institution        String?
  userId             Int
  startDateEducation String?
  endDateEducation   String?
  user               User    @relation(fields: [userId], references: [id])

  @@map("education")
}

model Job {
  idJob                  Int              @id @default(autoincrement())
  jobTitle               String
  requiredAbilities      String[]
  desiredExperienceYears Int
  desiredEducationLevel  String
  descriptionJob         String?           @default("")
  active                 Boolean          @default(true)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  userId                 Int
  user                   User             @relation(fields: [userId], references: [id])
  jobApplications        JobApplication[]

  @@map("job")
}

model JobApplication {
  idJobApplication Int      @id @default(autoincrement())
  userId           Int
  jobId            Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  job              Job      @relation(fields: [jobId], references: [idJob])
  user             User     @relation(fields: [userId], references: [id])

  @@map("jobApplication")
}
